{"remainingRequest":"/Users/peichin/Desktop/election2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/peichin/Desktop/election2/src/components/Content_news.vue?vue&type=template&id=91db1aee&","dependencies":[{"path":"/Users/peichin/Desktop/election2/src/components/Content_news.vue","mtime":1665027744044},{"path":"/Users/peichin/Desktop/election2/node_modules/cache-loader/dist/cjs.js","mtime":1664983475478},{"path":"/Users/peichin/Desktop/election2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1664983479952},{"path":"/Users/peichin/Desktop/election2/node_modules/cache-loader/dist/cjs.js","mtime":1664983475478},{"path":"/Users/peichin/Desktop/election2/node_modules/vue-loader/lib/index.js","mtime":1664983479950}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}