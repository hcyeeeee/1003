{"remainingRequest":"/Users/news/Desktop/new_election/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/news/Desktop/new_election/src/components/Content_profile.vue?vue&type=template&id=4da796f8&scoped=true&","dependencies":[{"path":"/Users/news/Desktop/new_election/src/components/Content_profile.vue","mtime":1664760145049},{"path":"/Users/news/Desktop/new_election/node_modules/cache-loader/dist/cjs.js","mtime":1664760140663},{"path":"/Users/news/Desktop/new_election/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1664760144502},{"path":"/Users/news/Desktop/new_election/node_modules/cache-loader/dist/cjs.js","mtime":1664760140663},{"path":"/Users/news/Desktop/new_election/node_modules/vue-loader/lib/index.js","mtime":1664760144501}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}