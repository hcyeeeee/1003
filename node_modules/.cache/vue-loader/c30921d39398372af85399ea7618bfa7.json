{"remainingRequest":"/Users/news/Desktop/topic_election2022/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/news/Desktop/topic_election2022/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/news/Desktop/topic_election2022/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/news/Desktop/topic_election2022/src/components/Content_profile.vue?vue&type=template&id=13b67c63&scoped=true&","dependencies":[{"path":"/Users/news/Desktop/topic_election2022/src/components/Content_profile.vue","mtime":1664258707488},{"path":"/Users/news/Desktop/topic_election2022/node_modules/cache-loader/dist/cjs.js","mtime":1639645388924},{"path":"/Users/news/Desktop/topic_election2022/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1639645391404},{"path":"/Users/news/Desktop/topic_election2022/node_modules/cache-loader/dist/cjs.js","mtime":1639645388924},{"path":"/Users/news/Desktop/topic_election2022/node_modules/vue-loader/lib/index.js","mtime":1639645390872}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}